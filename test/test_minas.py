"""
@pytest.mark.parametrize(
    "inMensaje, outMensaje",
    [
        ("Entrada1", "Salida1"),
        ("Entrada2", "Salida2")
    ]
)
def test_function(inMensaje, outMensaje):
    assert function(inMensaje) == outMensaje

[
    [" ", " ", " ", " ", " ", " ", " ", " "],
    [" ", " ", " ", " ", " ", " ", " ", " "],
    [" ", " ", " ", " ", " ", " ", " ", " "],
    [" ", " ", " ", " ", " ", " ", " ", " "],
    [" ", " ", " ", " ", " ", " ", " ", " "],
    [" ", " ", " ", " ", " ", " ", " ", " "],
    [" ", " ", " ", " ", " ", " ", " ", " "],
    [" ", " ", " ", " ", " ", " ", " ", " "]
]
"""
import pytest
from src.minas import contar_minas_adyacentes, imprimir_tablero, imprimir_tablero_oculto, revelar_celda


@pytest.mark.parametrize(
    "inTablero, inFila, inColumna, outCantidad_minas",
    [
        ([
         [' ', ' ', ' ', '*', ' ', ' ', ' ', ' '],
         [' ', '*', ' ', ' ', ' ', ' ', ' ', ' '],
         [' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'],
         [' ', '*', ' ', ' ', ' ', '*', ' ', ' '],
         [' ', '*', ' ', ' ', '*', ' ', ' ', ' '],
         [' ', ' ', ' ', ' ', '*', ' ', ' ', ' '],
         [' ', ' ', ' ', ' ', ' ', '*', ' ', ' '],
         [' ', ' ', ' ', ' ', '*', ' ', ' ', ' '] ],
         1, 2, 2),
        ([
         [' ', ' ', ' ', '*', ' ', ' ', ' ', ' '],
         [' ', '*', ' ', ' ', ' ', ' ', ' ', ' '],
         [' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'],
         [' ', '*', ' ', ' ', ' ', '*', ' ', ' '],
         [' ', '*', ' ', ' ', '*', ' ', ' ', ' '],
         [' ', ' ', ' ', ' ', '*', ' ', ' ', ' '],
         [' ', ' ', ' ', ' ', ' ', '*', ' ', ' '],
         [' ', ' ', ' ', ' ', '*', ' ', ' ', ' '] ],
         4, 5, 3)

    ]
)
def test_contar_minas_adyacentes(inTablero, inFila, inColumna, outCantidad_minas):
    assert contar_minas_adyacentes(inTablero, inFila, inColumna) == outCantidad_minas


@pytest.mark.parametrize(
    "inTablero, outDibujo",
    [
       ([
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "]
        ],
        ("   1 2 3 4 5 6 7 8\n"
         " 1                \n"
         " 2                \n"
         " 3                \n"
         " 4                \n"
         " 5                \n"
         " 6                \n"
         " 7                \n"
         " 8                \n")),
       ([
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", "F", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        ["0", "0", "1", "F", " ", " ", " ", " "],
        ["0", "0", "1", " ", " ", "F", " ", " "],
        ["1", "1", "0", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "]
        ],
        ("   1 2 3 4 5 6 7 8\n"
         " 1                \n"
         " 2   F            \n"
         " 3                \n"
         " 4 0 0 1 F        \n"
         " 5 0 0 1     F    \n"
         " 6 1 1 0          \n"
         " 7                \n"
         " 8                \n"))
    ]
)
def test_imprimir_tablero(inTablero, outDibujo):
    assert imprimir_tablero(inTablero) == outDibujo


@pytest.mark.parametrize(
    "inTablero, inBanderas, outDibujo",
    [
       ([
        [" ", " ", "*", " ", " ", " ", " ", " "],
        [" ", "*", " ", " ", "*", " ", "*", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", "*", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "*", " ", " "],
        [" ", " ", " ", " ", "*", " ", " ", " "],
        ["*", " ", " ", " ", " ", " ", "*", " "],
        [" ", "*", " ", "*", " ", " ", "*", " "]
        ], (),
        ("   1 2 3 4 5 6 7 8\n"
         " 1                \n"
         " 2                \n"
         " 3                \n"
         " 4                \n"
         " 5                \n"
         " 6                \n"
         " 7                \n"
         " 8                \n")),
       ([
        [" ", " ", "*", " ", " ", " ", " ", " "],
        [" ", "*", " ", " ", "*", " ", "*", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        ["0", "0", "1", "*", " ", " ", " ", " "],
        ["0", "0", "1", " ", " ", "*", " ", " "],
        ["1", "1", "0", " ", "*", " ", " ", " "],
        ["*", " ", " ", " ", " ", " ", "*", " "],
        [" ", "*", " ", "*", " ", " ", "*", " "]
        ], ((1, 1), (3, 3), (4, 5)),
        ("   1 2 3 4 5 6 7 8\n"
         " 1                \n"
         " 2   F            \n"
         " 3                \n"
         " 4 0 0 1 F        \n"
         " 5 0 0 1     F    \n"
         " 6 1 1 0          \n"
         " 7                \n"
         " 8                \n"))
    ]
)
def test_imprimir_tablero_oculto(inTablero, inBanderas, outDibujo):
    assert imprimir_tablero_oculto(inTablero, inBanderas) == outDibujo


@pytest.mark.parametrize(
    "inTablero, inRevelado, inFila, inColumna, outTupla",
    [
       ([
        [" ", " ", "*", " ", " ", " ", " ", " "],
        [" ", "*", " ", " ", "*", " ", "*", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", "*", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "*", " ", " "],
        [" ", " ", " ", " ", "*", " ", " ", " "],
        ["*", " ", " ", " ", " ", " ", "*", " "],
        [" ", "*", " ", "*", " ", " ", "*", " "]
        ], set(),
        3, 1,
        (   {(3, 1), (2, 0), (2, 1), (2, 2), (3, 0), (3, 2), (4, 0), (4, 1), (4, 2)},
            [
            [" ", " ", "*", " ", " ", " ", " ", " "],
            [" ", "*", " ", " ", "*", " ", "*", " "],
            ["1", "1", "2", " ", " ", " ", " ", " "],
            ["0", "0", "1", "*", " ", " ", " ", " "],
            ["0", "0", "1", " ", " ", "*", " ", " "],
            [" ", " ", " ", " ", "*", " ", " ", " "],
            ["*", " ", " ", " ", " ", " ", "*", " "],
            [" ", "*", " ", "*", " ", " ", "*", " "]
            ], True )
       ), (
        [
        [" ", " ", "*", " ", " ", " ", " ", " "],
        [" ", "*", " ", " ", "*", " ", "*", " "],
        ["1", "1", "2", " ", " ", " ", " ", " "],
        ["0", "0", "1", "*", " ", " ", " ", " "],
        ["0", "0", "1", " ", " ", "*", " ", " "],
        [" ", " ", " ", " ", "*", " ", " ", " "],
        ["*", " ", " ", " ", " ", " ", "*", " "],
        [" ", "*", " ", "*", " ", " ", "*", " "]
        ], {(3, 1), (2, 0), (2, 1), (2, 2), (3, 0), (3, 2), (4, 0), (4, 1), (4, 2)},
        4, 3,
        (   {(3, 1), (2, 0), (2, 1), (2, 2), (3, 0), (3, 2), (4, 0), (4, 1), (4, 2), (4, 3)},
            [
            [" ", " ", "*", " ", " ", " ", " ", " "],
            [" ", "*", " ", " ", "*", " ", "*", " "],
            ["1", "1", "2", " ", " ", " ", " ", " "],
            ["0", "0", "1", "*", " ", " ", " ", " "],
            ["0", "0", "1", "2", " ", "*", " ", " "],
            [" ", " ", " ", " ", "*", " ", " ", " "],
            ["*", " ", " ", " ", " ", " ", "*", " "],
            [" ", "*", " ", "*", " ", " ", "*", " "]
            ], True )
       )
    ]
)
def test_revelar_celda(inTablero, inRevelado, inFila, inColumna, outTupla):
    assert revelar_celda(inTablero, inRevelado, inFila, inColumna) == outTupla
